-- Bootstrap Lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

vim.opt.foldlevel = 99  -- High value to avoid closing most folds
vim.opt.foldlevelstart = 99  -- Applies when opening files

-- Enable mouse support for all modes (required for clickable interfaces)
vim.opt.mouse = "a"

-- Set leader key for keybindings
vim.g.mapleader = " "

-- Set up Lazy.nvim with plugins
require("lazy").setup({
  -- Telescope.nvim
  {
    "nvim-telescope/telescope.nvim",
    dependencies = { "nvim-lua/plenary.nvim" },
    config = function()
      local telescope = require("telescope")
      telescope.setup({
        defaults = {
          mappings = {
            i = {
              ["<C-j>"] = "move_selection_next",
              ["<C-k>"] = "move_selection_previous",
              ["<C-p>"] = "move_selection_previous",
            },
          },
        },
      })
      vim.keymap.set("n", "<C-p>", ":Telescope find_files<CR>", { noremap = true, silent = true })
      vim.keymap.set("n", "<leader>fg", ":Telescope live_grep<CR>", { noremap = true, silent = true })
    end,
  },
  -- nvim-tree.lua with Git integration
  {
    "nvim-tree/nvim-tree.lua",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config = function()
      require("nvim-tree").setup({
        view = {
          width = 30,
          side = "left",
        },
        renderer = {
          icons = {
            show = {
              file = true,
              folder = true,
              folder_arrow = true,
              git = true, -- Enable Git icons
            },
          },
        },
        filters = {
          dotfiles = false,
        },
        git = {
          enable = true, -- Show changed files via Git status
          ignore = false, -- Don't ignore Git-ignored files
        },
      })
      vim.keymap.set("n", "<leader>e", ":NvimTreeToggle<CR>", { noremap = true, silent = true })
    end,
  },
  -- gitsigns.nvim for Git changes and undo
  {
    "lewis6991/gitsigns.nvim",
    config = function()
      require("gitsigns").setup({
        signs = {
          add = { text = "+" },
          change = { text = "~" },
          delete = { text = "-" },
          topdelete = { text = "â€¾" },
          changedelete = { text = "~" },
        },
      })
      -- Keybindings for Git operations
      vim.keymap.set("n", "<leader>gp", ":Gitsigns preview_hunk<CR>", { noremap = true, silent = true }) -- Preview change
      vim.keymap.set("n", "<leader>gu", ":Gitsigns reset_hunk<CR>", { noremap = true, silent = true }) -- Undo (reset) hunk
      vim.keymap.set("n", "<leader>gU", ":Gitsigns reset_buffer<CR>", { noremap = true, silent = true }) -- Undo entire buffer
      vim.keymap.set("n", "<leader>gn", ":Gitsigns next_hunk<CR>", { noremap = true, silent = true }) -- Next change
      vim.keymap.set("n", "<leader>gN", ":Gitsigns prev_hunk<CR>", { noremap = true, silent = true }) -- Previous change
    end,
  },
  -- diffview.nvim for Git diff overview
  {
    "sindrets/diffview.nvim",
    dependencies = { "nvim-lua/plenary.nvim" },
    config = function()
      require("diffview").setup({
        view = {
          -- Use vertical side-by-side for changed/staged files
          default = {
            layout = "diff2_vertical",
            disable_diagnostics = true,  -- Hide diagnostics to reduce clutter
            winbar_info = false,
          },
          -- Vertical for file history too
          file_history = {
            layout = "diff2_vertical",
            disable_diagnostics = true,
            winbar_info = false,
          },
          -- Keep 3-way horizontal for merge/conflicts
          merge_tool = {
            layout = "diff3_horizontal",
            disable_diagnostics = true,
            winbar_info = false,
          },
        },
        file_panel = {
          listing_style = "list",  -- Flat list instead of tree for less clutter
          tree_options = {
            flatten_dirs = true,
            folder_statuses = "only_folded",  -- Hide folder statuses when possible
          },
        },
        watch_index = true, -- Automatically refresh the view when the Git index changes
      })
      -- Optional keymap to open diffview
      vim.keymap.set("n", "<leader>gD", ":DiffviewOpen<CR>", { noremap = true, silent = true })
    end,
  },
  -- vim-fugitive for Git integration (keeping for other features, but using custom function for unified diff)
  {
    "tpope/vim-fugitive",
    config = function()
      -- Custom function to show unified diff with side panel split for changed files and nvim-tree
      local function show_git_diff_with_panel()
        local api = require("nvim-tree.api")

        -- Create a new vertical split on the left for the panel area
        vim.cmd("leftabove 30vnew")
        -- Now split the left side horizontally, opening the bottom window for nvim-tree
        vim.cmd("below split")
        -- Current is in bottom-left, close any existing nvim-tree and open in this window
        api.tree.close()
        api.tree.open({ current_window = true })
        -- Get the tree buf
        local tree_buf = vim.api.nvim_get_current_buf()

        -- Go to top-left and resize it small for changed files list
        vim.cmd("wincmd k")
        vim.cmd("resize 15")  -- Adjust height for changed files panel (adjust as needed)

        local panel_buf = vim.api.nvim_get_current_buf()
        vim.opt_local.buftype = "nofile"
        vim.opt_local.bufhidden = "hide"
        vim.opt_local.swapfile = false
        vim.opt_local.number = false
        vim.opt_local.relativenumber = false
        vim.opt_local.cursorline = true
        vim.bo[panel_buf].filetype = "gitfiles"  -- Custom filetype for highlighting if needed

        -- Set up highlights for + and - using Catppuccin colors
        local palette = require("catppuccin.palettes").get_palette("mocha")
        vim.cmd('hi GitAdded guifg=' .. palette.green)
        vim.cmd('hi GitRemoved guifg=' .. palette.red)

        -- Add pattern matches for +digits and -digits (window-local) using very magic to avoid issues
        vim.fn.matchadd('GitAdded', '\\v\\+\\d+')
        vim.fn.matchadd('GitRemoved', '\\v-\\d+')

        -- Switch to the right window and create the diff buffer
        vim.cmd("wincmd l")
        vim.cmd("enew")
        local diff_buf = vim.api.nvim_get_current_buf()
        vim.opt_local.filetype = "diff"
        vim.opt_local.buftype = "nofile"
        vim.opt_local.bufhidden = "hide"
        vim.opt_local.swapfile = false

        local row_to_info = {}

        -- Function to refresh both changed files and diff
        local uv = vim.loop
        local last_refresh = 0
        local function refresh()
          local now = uv.now()
          if now - last_refresh < 500 then return end  -- Debounce 500ms
          last_refresh = now

          -- Refresh panel: git diff HEAD --numstat for staged and unstaged, plus untracked
          if vim.api.nvim_buf_is_valid(panel_buf) then
            -- Build tree structure
            local tree = {}
            local function split_path(path)
              local parts = {}
              for part in path:gmatch("[^/]+") do
                table.insert(parts, part)
              end
              return parts
            end
            local function insert_into_tree(current, parts, entry)
              if #parts == 0 then return end
              if #parts == 1 then
                current[parts[1]] = entry
              else
                local dir = parts[1]
                if not current[dir] then
                  current[dir] = { type = "dir", children = {} }
                end
                insert_into_tree(current[dir].children, { unpack(parts, 2) }, entry)
              end
            end

            -- Process changed files
            local numstat = vim.fn.systemlist("git diff HEAD --numstat")
            for _, line in ipairs(numstat) do
              local added, removed, file = line:match("([-%d]+)\t([-%d]+)\t(.-)$")
              if added and file then
                local parts = split_path(file)
                local entry
                if added == "-" then
                  entry = { type = "binary", is_untracked = false }
                else
                  entry = { type = "file", added = tonumber(added), removed = tonumber(removed), is_untracked = false }
                end
                insert_into_tree(tree, parts, entry)
              end
            end

            -- Add untracked files
            local untracked = vim.fn.systemlist("git ls-files --others --exclude-standard")
            for _, untracked_file in ipairs(untracked) do
              if untracked_file ~= "" then
                local parts = split_path(untracked_file)
                local file_type = vim.fn.system("file -b " .. vim.fn.shellescape(untracked_file)):gsub("\n", "")
                local entry
                if file_type:find("text") then
                  local file_lines = vim.fn.systemlist("cat " .. vim.fn.shellescape(untracked_file))
                  local added = #file_lines
                  entry = { type = "file", added = added, removed = 0, is_untracked = true }
                else
                  entry = { type = "binary", is_untracked = true }
                end
                insert_into_tree(tree, parts, entry)
              end
            end

            -- Build lines from tree
            local lines = {}
            row_to_info = {}
            local function build_lines(node, indent, current_path)
              local keys = {}
              for k in pairs(node) do table.insert(keys, k) end
              table.sort(keys)
              for _, key in ipairs(keys) do
                local child = node[key]
                if child.type == "dir" then
                  table.insert(lines, indent .. key .. "/")
                  local new_path = current_path .. (current_path == "" and "" or "/") .. key
                  build_lines(child.children, indent .. "  ", new_path)
                else
                  local line
                  local full_path = current_path .. (current_path == "" and "" or "/") .. key
                  if child.type == "binary" then
                    line = indent .. key .. " (binary)"
                  else
                    line = indent .. key .. " +" .. child.added .. " -" .. child.removed
                  end
                  table.insert(lines, line)
                  row_to_info[#lines] = {path = full_path, entry = child}
                end
              end
            end
            build_lines(tree, "", "")

            vim.api.nvim_buf_set_lines(panel_buf, 0, -1, false, lines)
          end

          -- Refresh diff: git diff HEAD plus untracked as fake diffs
          if vim.api.nvim_buf_is_valid(diff_buf) then
            local diff_output = vim.fn.systemlist("git diff HEAD")
            -- Add untracked files as diff hunks
            local untracked = vim.fn.systemlist("git ls-files --others --exclude-standard")
            for _, untracked_file in ipairs(untracked) do
              if untracked_file ~= "" then
                local file_type = vim.fn.system("file -b " .. vim.fn.shellescape(untracked_file)):gsub("\n", "")
                table.insert(diff_output, "diff --git a/" .. untracked_file .. " b/" .. untracked_file)
                table.insert(diff_output, "new file mode 100644")
                if file_type:find("text") then
                  local file_lines = vim.fn.systemlist("cat " .. vim.fn.shellescape(untracked_file))
                  table.insert(diff_output, "--- /dev/null")
                  table.insert(diff_output, "+++ b/" .. untracked_file)
                  table.insert(diff_output, "@@ -0,0 +1," .. #file_lines .. " @@")
                  for _, fline in ipairs(file_lines) do
                    table.insert(diff_output, "+" .. fline)
                  end
                else
                  table.insert(diff_output, "Binary files /dev/null and b/" .. untracked_file .. " differ")
                end
              end
            end
            vim.api.nvim_buf_set_lines(diff_buf, 0, -1, false, diff_output)
            -- Optionally unfold
            vim.cmd("normal zR")
          end
        end

        -- Initial populate
        refresh()

        -- Function to load single file diff
        local function load_file_diff(use_mouse_pos)
          local row
          if use_mouse_pos then
            local mouse = vim.fn.getmousepos()
            if vim.api.nvim_win_get_buf(mouse.winid) == panel_buf then  -- Ensure click in panel buffer
              vim.api.nvim_set_current_win(mouse.winid)
              vim.api.nvim_win_set_cursor(mouse.winid, {mouse.line, mouse.column - 1})
            end
            row = mouse.line
          else
            local cursor = vim.api.nvim_win_get_cursor(0)
            row = cursor[1]
          end
          local info = row_to_info[row]
          if info then
            local path = info.path
            local entry = info.entry
            if entry.type == "file" or entry.type == "binary" then
              vim.cmd("wincmd l")  -- Switch to diff window
              local diff_output = {}
              if entry.type == "binary" then
                table.insert(diff_output, "Binary file differs")
              else
                if entry.is_untracked then
                  -- Generate fake diff for untracked text file
                  local file_lines = vim.fn.systemlist("cat " .. vim.fn.shellescape(path))
                  table.insert(diff_output, "diff --git a/" .. path .. " b/" .. path)
                  table.insert(diff_output, "new file mode 100644")
                  table.insert(diff_output, "--- /dev/null")
                  table.insert(diff_output, "+++ b/" .. path)
                  table.insert(diff_output, "@@ -0,0 +1," .. #file_lines .. " @@")
                  for _, fline in ipairs(file_lines) do
                    table.insert(diff_output, "+" .. fline)
                  end
                else
                  -- Get git diff for tracked file
                  diff_output = vim.fn.systemlist("git diff HEAD -- " .. vim.fn.shellescape(path))
                end
              end
              vim.api.nvim_buf_set_lines(0, 0, -1, false, diff_output)
              vim.opt_local.filetype = "diff"
              vim.cmd("normal gg")  -- Go to top
              vim.cmd("normal zR")  -- Unfold all
            end
          end
        end

        -- Keymap in panel: <CR> to load diff (keyboard, use cursor)
        vim.keymap.set("n", "<CR>", function() load_file_diff(false) end, { buffer = panel_buf, silent = true })

        -- Keymap in panel: <LeftMouse> for single click
        vim.keymap.set("n", "<LeftMouse>", function() load_file_diff(true) end, { buffer = panel_buf, silent = true })

        -- Keymap in panel: <2-LeftMouse> for double click as fallback
        vim.keymap.set("n", "<2-LeftMouse>", function() load_file_diff(true) end, { buffer = panel_buf, silent = true })

        -- Keymap to close: q in panel, diff, and tree (closes current window)
        vim.keymap.set("n", "q", ":q<CR>", { buffer = panel_buf, silent = true })
        vim.keymap.set("n", "q", ":q<CR>", { buffer = diff_buf, silent = true })
        vim.keymap.set("n", "q", ":q<CR>", { buffer = tree_buf, silent = true })

        -- Set up filesystem watcher for auto-refresh
        local watcher = uv.new_fs_event()
        watcher:start(vim.fn.getcwd(), { recursive = true }, vim.schedule_wrap(function(err, filename, events)
          if err then return end
          refresh()
        end))

        -- Stop watcher on buffer unload
        local group = vim.api.nvim_create_augroup("GitDiffWatcher", { clear = true })
        local function add_unload_autocmd(buf)
          vim.api.nvim_create_autocmd("BufUnload", {
            group = group,
            buffer = buf,
            callback = function()
              if watcher:is_active() then watcher:stop() end
            end,
          })
        end
        add_unload_autocmd(panel_buf)
        add_unload_autocmd(diff_buf)
        add_unload_autocmd(tree_buf)
      end

      -- Keymap for unified diff with side panel
      vim.keymap.set("n", "<leader>gd", show_git_diff_with_panel, { noremap = true, silent = true })
    end,
  },
  -- Catppuccin theme for that sleek, minimalist Johnny Ive vibe with a mocha twist
  {
    "catppuccin/nvim",
    name = "catppuccin",
    priority = 1000, -- Load early to set colorscheme properly
    config = function()
      require("catppuccin").setup({
        flavour = "mocha", -- Dark, rich, coffee-shop elegant theme
        background = { -- Optional: Set dark background explicitly
          light = "latte",
          dark = "mocha", -- Using mocha for the dark aesthetic
        },
        transparent_background = false, -- Keep it solid for that premium feel
        integrations = {
          telescope = true, -- Integrate with Telescope for consistent look
          nvimtree = true, -- Nvim-Tree styling
          gitsigns = true, -- Gitsigns highlights
          diffview = true, -- Diffview support
          mason = true, -- Mason integration
          cmp = true, -- nvim-cmp integration
          native_lsp = {
            enabled = true,
            underlines = {
              errors = { "undercurl" },
              hints = { "undercurl" },
              warnings = { "undercurl" },
              information = { "undercurl" },
            },
          },
        },
        styles = {
          comments = { "italic" }, -- Soft italics for comments
          conditionals = { "italic" },
          loops = {},
          functions = {},
          keywords = {},
          strings = {},
          variables = {},
          numbers = {},
          booleans = {},
          properties = {},
          types = {},
          operators = {},
        },
      })
      -- Set the colorscheme after setup
      vim.cmd.colorscheme "catppuccin-mocha"
    end,
  },
  -- Mason for LSP server management
  {
    "williamboman/mason.nvim",
    config = function()
      require("mason").setup()
    end,
  },
  -- Bridge between mason.nvim and lspconfig
  {
    "williamboman/mason-lspconfig.nvim",
    dependencies = { "williamboman/mason.nvim", "neovim/nvim-lspconfig" },
    config = function()
      require("mason-lspconfig").setup({
        ensure_installed = { "ts_ls" },
      })
    end,
  },
  -- nvim-lspconfig for LSP configurations
  {
    "neovim/nvim-lspconfig",
    dependencies = { "williamboman/mason-lspconfig.nvim" },
    config = function()
      local lspconfig = require("lspconfig")
      local capabilities = require("cmp_nvim_lsp").default_capabilities()
      lspconfig.ts_ls.setup({
        capabilities = capabilities,
        -- Configuration for TypeScript/React
        filetypes = { "javascript", "javascriptreact", "typescript", "typescriptreact" },
        root_dir = lspconfig.util.root_pattern("package.json", "tsconfig.json", ".git"),
      })

      -- Global keybindings for LSP
      vim.api.nvim_create_autocmd("LspAttach", {
        group = vim.api.nvim_create_augroup("UserLspConfig", {}),
        callback = function(ev)
          local opts = { buffer = ev.buf, noremap = true, silent = true }
          vim.keymap.set("n", "gD", vim.lsp.buf.declaration, opts) -- Go to declaration
          vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts) -- Go to definition (note: conflicts with <leader>gd, adjust if needed)
          vim.keymap.set("n", "K", vim.lsp.buf.hover, opts) -- Hover information
          vim.keymap.set("n", "gi", vim.lsp.buf.implementation, opts) -- Go to implementation
          vim.keymap.set("n", "<C-k>", vim.lsp.buf.signature_help, opts) -- Signature help
          vim.keymap.set("n", "<leader>wa", vim.lsp.buf.add_workspace_folder, opts) -- Add workspace folder
          vim.keymap.set("n", "<leader>wr", vim.lsp.buf.remove_workspace_folder, opts) -- Remove workspace folder
          vim.keymap.set("n", "<leader>wl", function() print(vim.inspect(vim.lsp.buf.list_workspace_folders())) end, opts) -- List workspace folders
          vim.keymap.set("n", "<leader>D", vim.lsp.buf.type_definition, opts) -- Type definition
          vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts) -- Rename
          vim.keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, opts) -- Code action
          vim.keymap.set("n", "gr", vim.lsp.buf.references, opts) -- References
          vim.keymap.set("n", "<leader>f", function() vim.lsp.buf.format { async = true } end, opts) -- Format buffer
        end,
      })
    end,
  },
  -- nvim-cmp for autocompletion
  {
    "hrsh7th/nvim-cmp",
    dependencies = {
      "hrsh7th/cmp-nvim-lsp",
      "hrsh7th/cmp-buffer",
      "hrsh7th/cmp-path",
      "L3MON4D3/LuaSnip",
      "saadparwaiz1/cmp_luasnip",
    },
    config = function()
      local cmp = require("cmp")
      local luasnip = require("luasnip")

      cmp.setup({
        snippet = {
          expand = function(args)
            luasnip.lsp_expand(args.body)
          end,
        },
        mapping = cmp.mapping.preset.insert({
          ["<C-b>"] = cmp.mapping.scroll_docs(-4),
          ["<C-f>"] = cmp.mapping.scroll_docs(4),
          ["<C-Space>"] = cmp.mapping.complete(),
          ["<CR>"] = cmp.mapping.confirm({
            behavior = cmp.ConfirmBehavior.Replace,
            select = true,
          }),
          ["<Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
              luasnip.expand_or_jump()
            else
              fallback()
            end
          end, { "i", "s" }),
          ["<S-Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
              luasnip.jump(-1)
            else
              fallback()
            end
          end, { "i", "s" }),
        }),
        sources = cmp.config.sources({
          { name = "nvim_lsp" },
          { name = "luasnip" },
        }, {
          { name = "buffer" },
          { name = "path" },
        }),
      })
    end,
  },
})

-- Function to display keybindings help
local function show_keybindings()
  local keybinds = {
    {"Keybindings:\n"},
    {"  <C-p> (Ctrl+P)     - Open file search (Telescope find_files)\n"},
    {"  <leader>fg (Space fg) - Live grep search (Telescope live_grep)\n"},
    {"  <leader>e  (Space e)  - Toggle file explorer (NvimTree)\n"},
    {"  <leader>gp (Space gp) - Preview Git hunk change\n"},
    {"  <leader>gu (Space gu) - Undo (reset) Git hunk\n"},
    {"  <leader>gU (Space gU) - Undo (reset) entire buffer Git changes\n"},
    {"  <leader>gn (Space gn) - Jump to next Git hunk\n"},
    {"  <leader>gN (Space gN) - Jump to previous Git hunk\n"},
    {"  <leader>gd (Space gd) - Open unified Git diff with side panel (top: changed files including untracked, bottom: nvim-tree, auto-updates on file changes)\n"},
    {"  <leader>gD (Space gD) - Open Git diff view (Diffview)\n"},
    {"LSP Keybindings (after LSP attaches):\n"},
    {"  gD                 - Go to declaration\n"},
    {"  gd                 - Go to definition\n"},
    {"  K                  - Hover information\n"},
    {"  gi                 - Go to implementation\n"},
    {"  <C-k>              - Signature help\n"},
    {"  <leader>wa         - Add workspace folder\n"},
    {"  <leader>wr         - Remove workspace folder\n"},
    {"  <leader>wl         - List workspace folders\n"},
    {"  <leader>D          - Type definition\n"},
    {"  <leader>rn         - Rename\n"},
    {"  <leader>ca         - Code action\n"},
    {"  gr                 - References\n"},
    {"  <leader>f          - Format buffer\n"},
  }
  vim.api.nvim_echo(keybinds, false, {})
end

-- Create user command :Keys to show keybindings
vim.api.nvim_create_user_command('Keys', show_keybindings, {})

-- Show keybindings on startup if no files are opened
vim.api.nvim_create_autocmd("VimEnter", {
  callback = function()
    if vim.fn.argc() == 0 then
      show_keybindings()
    end
  end,
})
